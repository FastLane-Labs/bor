name: FastLane bor create new release

on:
  workflow_dispatch:

env:
    UPSTREAM_PROJECT: maticnetwork/bor
    ORIGIN_PROJECT: FastLane-Labs/bor
    PATCH_URL: https://raw.githubusercontent.com/FastLane-Labs/sentry-patch/main/announce_only.patch

jobs:
  release-new-bor-version:
    name: Sync tags with upstream
    # runs-on: pfl-main-ubuntu
    runs-on: ubuntu-latest
    outputs:
      upstream_tag: ${{ steps.check-upstream-tags.outputs.UPSTREAM_TAG }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
      - name: Check upstream releases
        # fetch latest releases from upstream and origin
        # compare releases and set output if there is a new release found
        # fail if releases are the same or error fetching; stop actions
        id: check-upstream-tags
        run: |
          upstream_tag=$(curl -sL -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "https://api.github.com/repos/${UPSTREAM_PROJECT}/releases/latest" | jq -r ".tag_name")
          origin_tag=$(curl -sL -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "https://api.github.com/repos/${ORIGIN_PROJECT}/releases/latest" | jq -r ".tag_name")
          
          echo "UPSTREAM_TAG=$upstream_tag" >> "$GITHUB_OUTPUT"
          echo "ORIGIN_TAG=$origin_tag" >> "$GITHUB_OUTPUT"
          echo "Upstream: $upstream_tag"
          echo "Origin: $origin_tag"
          # fail if any of the tags is null or if the tags are the same
          if [[ -z $upstream_tag || -z $origin_tag || $upstream_tag == $origin_tag ]]; then
            echo "Tags must not be null or the same"
            exit 1
          fi
      - name: Print tags
        if: success()
        run: |
          echo "Upstream: ${{ steps.check-upstream-tags.outputs.UPSTREAM_TAG }}
          echo "Origin: ${{ steps.check-upstream-tags.outputs.ORIGIN_TAG }}
      - name: Apply patch
        run: |
          # ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
          git remote add upstream https://github.com/${UPSTREAM_PROJECT}.git 2>/dev/null || :
          git config --global user.name 'GH Actions'
          git config --global user.email 'actions@fastlane.finance'
          git status
          git remote -v
          git fetch upstream --tags
          git checkout ${{ steps.check-upstream-tags.outputs.UPSTREAM_TAG }}
          curl -o pfl.patch ${PATCH_URL}
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/$ORIGIN_PROJECT.git
          git status
          git remote -v
          #ls -l
          #ls -l eth
          git apply pfl.patch -vvv
          rm -rf pfl.patch
          git add .
          git commit -m "apply fastlane sentry-patch"
          git tag -d ${{ steps.check-upstream-tags.outputs.UPSTREAM_TAG }}
          git tag ${{ steps.check-upstream-tags.outputs.UPSTREAM_TAG }}
          git push origin ${{ steps.check-upstream-tags.outputs.UPSTREAM_TAG }}

  push_to_dockerhub:
    name: DockerHub build and push
    runs-on: ubuntu-latest
    needs: [release-new-bor-version]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-new-bor-version.outputs.upstream_tag }}
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with: 
          images: fastlanelabs/bor-sentry-patched
          tags: |
            type=raw,value=${{ needs.release-new-bor-version.outputs.upstream_tag }}
            type=raw,value=latest
      - name: Print metadata
        run: |
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Labels: ${{ steps.meta.outputs.labels }}"
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  update_new_release:
    # packager Action on master branch will build and publish a new release
    # the new release will not be tagged as latest and will be marked as pre-release
    # this step is required to tag as latest and mark as latest release
    name: DockerHub build and push
    runs-on: ubuntu-latest
    needs: [release-new-bor-version]
    steps:
      - name: Apply patch
        run: |
          # use GH API to update the release
          while true; do
              # Get the latest tag of the GitHub release
              latest_release_tag=$(curl -sL -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "https://api.github.com/repos/${ORIGIN_PROJECT}/releases/tags/${{ needs.release-new-bor-version.outputs.upstream_tag }}" | jq -r ".tag_name")
          
              # Update the release only if the build is completed and new release is published
              if [[ "$latest_release_tag" == "${{ needs.release-new-bor-version.outputs.upstream_tag }}" ]]; then
                  release_id=$(curl -L -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "https://api.github.com/repos/${ORIGIN_PROJECT}/releases/tags/${{ needs.release-new-bor-version.outputs.upstream_tag }}" | jq -r ".id")
                  # update release tag and status
                  curl -L -X PATCH -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GH_PAT }}" -H "X-GitHub-Api-Version: 2022-11-28" "https://api.github.com/repos/${ORIGIN_PROJECT}/releases/${release_id}" \
                  -d '{"make_latest":true,"prerelease":false}'
                  break
              fi
          
              # Wait for 10 seconds before checking again
              sleep 10
          done
        
